spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order_service
spring.datasource.username=root
spring.datasource.password=mysql
spring.jpa.hibernate.ddl-auto=update

server.port=0

eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
spring.application.name=order-service

management.health.circuitBreaker.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# Resilience4J Properties
resilience4j.circuitbreaker.instances.inventory-service.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory-service.eventConsumerBufferSize=10
resilience4j.circuitbreaker.instances.inventory-service.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory-service.slidingWindowSize=5
resilience4j.circuitbreaker.instances.inventory-service.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory-service.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.inventory-service.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory-service.automaticTransitionFromOpenToHalfOpenEnabled=true

#Resilience4J Timeout Properties
resilience4j.timeout.instances.inventory-service.timeoutDuration=3s

# Resilience4J Retry Properties
resilience4j.retry.instances.inventory-service.maxRetryAttempts=3
resilience4j.retry.instances.inventory-service.waitDuration=5s

management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
management.tracing.sampling.probability=1.0
logging.pattern.level=%5p [${spring.application.name},%X{traceId:-},%X{spanId:-}]

# Kafka Properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.coffecoder.orderservice.event.OrderPlacedEvent